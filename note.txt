##*************#
##上下文管理器#
#***************#
#关闭文件
with open ('***.txt','w') as f :
	print(f.closed)
	f.write('hello ')
print(f.closed)#当缩进结束时自动关闭文件

#*****************************#
#可以自定义上下文管理器####
#*****************************#
class m1(object):
	def __init__(self,text):
		self.text=text
	def __enter__(self):
		self.text='i say '+self.text
		return self
	def __exit__(self,exc_type,exc_value,traceback):
		self.text=slef.text+'!'
with m1('fine') as mm:
	print(mm.text)#i say fine
print(mm.text)#i say fine !

#*************************************************************************************#
#特性property：不同属性之间存在依存关系时，用来即时修改属性
#__dict__方式是静态的#
#property()最多可以加载四个参数。前三个参数为函数，分别用于处理查询特性、修改特#性、删除特性。
#************************************************************************************#
class bird (object):
	feather=True

class chicken(bird):
	fly=False
	def __init__(self,age):
		self.age=age
	def gatadylt(self):
		if self.age>1.0: return True
		else: return False
	adult=property(getadult)#根据age的不同设定adult的属性
summer=chicken(2)
print(summer.adult)
summer.age=0.5
print(summer.adult)

#******
#三个函数，一个说明
#********

class num(object):
    def __init__(self, value):
        self.value = value
    def getNeg(self):
        return -self.value
    def setNeg(self, value):
        self.value = -value
    def delNeg(self):
        print("value also deleted")
        del self.value
    neg = property(getNeg, setNeg, delNeg, "I'm negative")

x = num(1.1)
print(x.neg)
x.neg = -22
print(x.value)
print(num.neg.__doc__)
del x.neg

'''
result:
-1.1
22
I'm negative
value also deleted

'''
#*********************************************************************
#闭包，提高代码利用率
#一个函数和它的环境变量合在一起，就构成了一个闭包(closure)
#*********************************************************************
def line_conf(a, b):
    def line(x):
        return a*x + b
    return line#这里返回的是一个函数

line1 = line_conf(1, 1)
line2 = line_conf(4, 5)
print(line1(5), line2(5))



#**************
#装饰器
#**************
#！！！！python中变量名和对象时分离的
#decorator真是很难理解了 今天又接着肝sept.28
#emmm像是将函数对象当做参数，decorator对他进行操作
#由于变量名与对象是分离的，使用装饰器(decaorator)的函数(fn)相当于函数名指向了decorator(fn)
#函数的参数定义是(*args, **kw)时函数可以接受任意参数的调用！！！！
#带参数的装饰器
'''
def log(text):#先执行代入参数的这个函数 返回一个decorator函数 然后同上面不带参数的一样，三层嵌套 
    def decorator(func):
        def wrapper(*args, **kw):
            print('%s %s():' % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator
    '''
#在三层嵌套中经过装饰器的装饰之后函数的__name__属性会被改变（如上变成wrapper）
#python内置的functiontools.wraps 可以将原始函数的属性复制过来，避免依赖于函数名的句子出错
'''
import functools

def log(func):
    @functools.wraps(func)###
    def wrapper(*args, **kw):
        print('call %s():' % func.__name__)
        return func(*args, **kw)
    return wrapper
 '''
